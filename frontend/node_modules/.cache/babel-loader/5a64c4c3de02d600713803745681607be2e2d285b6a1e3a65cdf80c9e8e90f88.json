{"ast":null,"code":"var _jsxFileName = \"/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { DataContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Questions() {\n  _s();\n  const {\n    questions,\n    options\n  } = useContext(DataContext);\n  console.log(\"Questions state: \", questions); // Log questions state\n  console.log(\"Options state: \", options); // Log options state\n\n  // Check if questions exist and are in an array form\n  if (!Array.isArray(questions) || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available. Please enter a URL and click Classify.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Generated Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [index + 1, \". \", question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this), Array.isArray(options) && options.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyleType: 'none',\n          paddingLeft: 0\n        },\n        children: options.map((option, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `option-${index}-${optIndex}`,\n            name: `option-${index}`,\n            value: option,\n            style: {\n              marginRight: '8px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `option-${index}-${optIndex}`,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 37\n          }, this)]\n        }, optIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No options available for this question.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n_s(Questions, \"Nz9U8dWTDnGcVQJ9q/m8k6n3ePU=\");\n_c = Questions;\nexport default Questions;\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n//     // console.log(\"Options Length: \", options[0])\n//     // console.log(\"Full otions list\");\n//     // for (let i = 0; i < options.length; i++) {\n//     //     console.log(options[i]);}\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {Array.isArray(options) && options.length > 0 ? (\n//                         <ul>\n//                             {options.map((option, optIndex) => ( \n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     ) : (\n//                         <p>No options available for this question.</p>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n// export default Questions;\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {options[index] && (\n//                         <ul>\n//                             {options[index].map((option, optIndex) => (\n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useContext","DataContext","jsxDEV","_jsxDEV","Questions","_s","questions","options","console","log","Array","isArray","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","question","index","style","listStyleType","paddingLeft","option","optIndex","display","alignItems","type","id","name","value","marginRight","htmlFor","_c","$RefreshReg$"],"sources":["/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/Questions.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DataContext } from '../App';\n\nfunction Questions() {\n    const { questions, options } = useContext(DataContext);\n\n    console.log(\"Questions state: \", questions); // Log questions state\n    console.log(\"Options state: \", options); // Log options state\n\n    // Check if questions exist and are in an array form\n    if (!Array.isArray(questions) || questions.length === 0) {\n        return <p>No questions available. Please enter a URL and click Classify.</p>;\n    }\n\n    return (\n        <div className=\"questions\">\n            <h2>Generated Questions</h2>\n            {questions.map((question, index) => (\n                <div key={index} className=\"question-block\">\n                    <p><strong>{index + 1}. {question}</strong></p>\n                    {Array.isArray(options) && options.length > 0 ? (\n                        <ul style={{ listStyleType: 'none', paddingLeft: 0 }}>\n                            {options.map((option, optIndex) => (\n                                <li key={optIndex} style={{ display: 'flex', alignItems: 'center' }}>\n                                    <input \n                                        type=\"checkbox\" \n                                        id={`option-${index}-${optIndex}`} \n                                        name={`option-${index}`} \n                                        value={option} \n                                        style={{ marginRight: '8px' }}\n                                    />\n                                    <label htmlFor={`option-${index}-${optIndex}`}>{option}</label>\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        <p>No options available for this question.</p>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Questions;\n\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n//     // console.log(\"Options Length: \", options[0])\n//     // console.log(\"Full otions list\");\n//     // for (let i = 0; i < options.length; i++) {\n//     //     console.log(options[i]);}\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {Array.isArray(options) && options.length > 0 ? (\n//                         <ul>\n//                             {options.map((option, optIndex) => ( \n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     ) : (\n//                         <p>No options available for this question.</p>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n// export default Questions;\n\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {options[index] && (\n//                         <ul>\n//                             {options[index].map((option, optIndex) => (\n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}