{"ast":null,"code":"var _jsxFileName = \"/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/InputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { DataContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputForm() {\n  _s();\n  const [url, setUrl] = useState('');\n  const {\n    setQuestions,\n    setOptions\n  } = useContext(DataContext);\n  const handleUrlChange = e => {\n    setUrl(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/classify', {\n        url\n      });\n      const {\n        questions,\n        options\n      } = response.data;\n\n      // Ensure that questions and options are arrays before setting state\n      setQuestions(Array.isArray(questions) ? questions : []);\n      setOptions(Array.isArray(options) ? options : []);\n    } catch (error) {\n      console.error(\"Error fetching classification:\", error);\n      setQuestions([]); // Set to empty array on error\n      setOptions([]); // Set to empty array on error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Website URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: handleUrlChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Classify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(InputForm, \"0HtALogfg2K48TVXtbhGJ3kw2CQ=\");\n_c = InputForm;\nexport default InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["React","useState","useContext","axios","DataContext","jsxDEV","_jsxDEV","InputForm","_s","url","setUrl","setQuestions","setOptions","handleUrlChange","e","target","value","handleSubmit","preventDefault","response","post","questions","options","data","Array","isArray","error","console","onSubmit","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/InputForm.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport axios from 'axios';\nimport { DataContext } from '../App';\n\nfunction InputForm() {\n    const [url, setUrl] = useState('');\n    const { setQuestions, setOptions } = useContext(DataContext);\n\n    const handleUrlChange = (e) => {\n        setUrl(e.target.value);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post('http://127.0.0.1:5000/classify', { url });\n            const { questions, options } = response.data;\n\n            // Ensure that questions and options are arrays before setting state\n            setQuestions(Array.isArray(questions) ? questions : []);\n            setOptions(Array.isArray(options) ? options : []);\n        } catch (error) {\n            console.error(\"Error fetching classification:\", error);\n            setQuestions([]);  // Set to empty array on error\n            setOptions([]);    // Set to empty array on error\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                Website URL:\n                <input type=\"text\" value={url} onChange={handleUrlChange} />\n            </label>\n            <button type=\"submit\">Classify</button>\n        </form>\n    );\n}\n\nexport default InputForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAEU,YAAY;IAAEC;EAAW,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EAE5D,MAAMS,eAAe,GAAIC,CAAC,IAAK;IAC3BJ,MAAM,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAC9BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,gCAAgC,EAAE;QAAEX;MAAI,CAAC,CAAC;MAC5E,MAAM;QAAEY,SAAS;QAAEC;MAAQ,CAAC,GAAGH,QAAQ,CAACI,IAAI;;MAE5C;MACAZ,YAAY,CAACa,KAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,GAAGA,SAAS,GAAG,EAAE,CAAC;MACvDT,UAAU,CAACY,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,GAAGA,OAAO,GAAG,EAAE,CAAC;IACrD,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDf,YAAY,CAAC,EAAE,CAAC,CAAC,CAAE;MACnBC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAI;IACvB;EACJ,CAAC;EAED,oBACIN,OAAA;IAAMsB,QAAQ,EAAEX,YAAa;IAAAY,QAAA,gBACzBvB,OAAA;MAAAuB,QAAA,GAAO,cAEH,eAAAvB,OAAA;QAAOwB,IAAI,EAAC,MAAM;QAACd,KAAK,EAAEP,GAAI;QAACsB,QAAQ,EAAElB;MAAgB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,eACR7B,OAAA;MAAQwB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEf;AAAC3B,EAAA,CAjCQD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAmClB,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}