{"ast":null,"code":"var _jsxFileName = \"/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/InputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport { DataContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputForm() {\n  _s();\n  const [url, setUrl] = useState(\"\");\n  const {\n    setQuestions,\n    setOptions\n  } = useContext(DataContext);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/classify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url\n        })\n      });\n      const data = await response.json();\n      setQuestions([data.questions]); // Wrap in array if single string\n      setOptions(data.options); // Directly set options array\n    } catch (error) {\n      console.error(\"Error fetching classification:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: url,\n      onChange: e => setUrl(e.target.value),\n      placeholder: \"Enter website URL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Classify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(InputForm, \"L1tMBiJTjvIuHTu9G9DBgta1Vu0=\");\n_c = InputForm;\nexport default InputForm;\n\n// import React, { useState, useContext } from 'react';\n// import axios from 'axios';\n// import { DataContext } from '../App';\n\n// function InputForm() {\n//     const [url, setUrl] = useState('');\n//     const { setQuestions, setOptions } = useContext(DataContext);\n\n//     const handleUrlChange = (e) => {\n//         setUrl(e.target.value);\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await axios.post('http://127.0.0.1:5000/classify', { url });\n//             console.log(\"API Response:\", response.data);  // Log for debugging\n\n//             const { questions, options } = response.data;\n//             // Validate the structure before setting state\n//             if (Array.isArray(questions) && Array.isArray(options)) {\n//                 setQuestions(questions);\n//                 setOptions(options);\n//             } else {\n//                 console.error(\"Invalid data structure:\", response.data);\n//                 setQuestions([]);\n//                 setOptions([]);\n//             }\n\n//             // setQuestions(Array.isArray(questions) ? questions : []);\n//             // setOptions(Array.isArray(options) ? options : []);\n\n//         } catch (error) {\n//             console.error(\"Error fetching classification:\", error);\n//             setQuestions([]);\n//             setOptions([]);\n//         }\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <label>\n//                 Website URL:\n//                 <input type=\"text\" value={url} onChange={handleUrlChange} />\n//             </label>\n//             <button type=\"submit\">Classify</button>\n//         </form>\n//     );\n// }\n\n// export default InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["React","useState","useContext","DataContext","jsxDEV","_jsxDEV","InputForm","_s","url","setUrl","setQuestions","setOptions","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","questions","options","error","console","onSubmit","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/InputForm.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport { DataContext } from '../App';\n\nfunction InputForm() {\n    const [url, setUrl] = useState(\"\");\n    const { setQuestions, setOptions } = useContext(DataContext);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await fetch('http://localhost:5000/classify', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ url }),\n            });\n            const data = await response.json();\n            setQuestions([data.questions]); // Wrap in array if single string\n            setOptions(data.options); // Directly set options array\n        } catch (error) {\n            console.error(\"Error fetching classification:\", error);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                placeholder=\"Enter website URL\"\n            />\n            <button type=\"submit\">Classify</button>\n        </form>\n    );\n}\n\nexport default InputForm;\n\n\n// import React, { useState, useContext } from 'react';\n// import axios from 'axios';\n// import { DataContext } from '../App';\n\n// function InputForm() {\n//     const [url, setUrl] = useState('');\n//     const { setQuestions, setOptions } = useContext(DataContext);\n\n//     const handleUrlChange = (e) => {\n//         setUrl(e.target.value);\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await axios.post('http://127.0.0.1:5000/classify', { url });\n//             console.log(\"API Response:\", response.data);  // Log for debugging\n\n//             const { questions, options } = response.data;\n//             // Validate the structure before setting state\n//             if (Array.isArray(questions) && Array.isArray(options)) {\n//                 setQuestions(questions);\n//                 setOptions(options);\n//             } else {\n//                 console.error(\"Invalid data structure:\", response.data);\n//                 setQuestions([]);\n//                 setOptions([]);\n//             }\n\n//             // setQuestions(Array.isArray(questions) ? questions : []);\n//             // setOptions(Array.isArray(options) ? options : []);\n\n//         } catch (error) {\n//             console.error(\"Error fetching classification:\", error);\n//             setQuestions([]);\n//             setOptions([]);\n//         }\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <label>\n//                 Website URL:\n//                 <input type=\"text\" value={url} onChange={handleUrlChange} />\n//             </label>\n//             <button type=\"submit\">Classify</button>\n//         </form>\n//     );\n// }\n\n// export default InputForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAES,YAAY;IAAEC;EAAW,CAAC,GAAGT,UAAU,CAACC,WAAW,CAAC;EAE5D,MAAMS,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb;QAAI,CAAC;MAChC,CAAC,CAAC;MACF,MAAMc,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCb,YAAY,CAAC,CAACY,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;MAChCb,UAAU,CAACW,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAMuB,QAAQ,EAAEhB,YAAa;IAAAiB,QAAA,gBACzBxB,OAAA;MACIyB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEvB,GAAI;MACXwB,QAAQ,EAAGnB,CAAC,IAAKJ,MAAM,CAACI,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;MACxCG,WAAW,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFjC,OAAA;MAAQyB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEf;AAAC/B,EAAA,CA/BQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAiClB,eAAeA,SAAS;;AAGxB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}