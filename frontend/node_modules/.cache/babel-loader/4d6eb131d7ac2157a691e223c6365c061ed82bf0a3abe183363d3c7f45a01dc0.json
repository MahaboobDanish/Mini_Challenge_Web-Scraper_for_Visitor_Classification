{"ast":null,"code":"var _jsxFileName = \"/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Questions() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n\n  // Simulate fetching questions and options from the backend\n  useEffect(() => {\n    // Here you can set data fetched from backend directly, for example:\n    // setQuestions(response.questions);\n    // setOptions(response.options);\n\n    // Example data, you should update this with the actual API response:\n    // const fetchedQuestions = [\"Are you looking for investment tips or financial planning?\"];\n    // const fetchedOptions = [\"Stock market\", \"Personal finance\", \"Cryptocurrency\", \"Investment tips\"];\n\n    setQuestions(fetchedQuestions);\n    setOptions(fetchedOptions);\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Questions & Options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions && questions.length > 0 ? questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Array.isArray(options) && options.length > 0 ? options.map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: option\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No options available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No questions available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(Questions, \"a4cikFzHmY7ExwKYKO+9xbOFDns=\");\n_c = Questions;\nexport default Questions;\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {options[index] && (\n//                         <ul>\n//                             {options[index].map((option, optIndex) => (\n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","setQuestions","options","setOptions","fetchedQuestions","fetchedOptions","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","question","index","Array","isArray","option","i","_c","$RefreshReg$"],"sources":["/Users/danishkarur/opt/Learnings_VS_Code/Project_Root/frontend/src/components/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Questions() {\n  const [questions, setQuestions] = useState([]);\n  const [options, setOptions] = useState([]);\n\n  // Simulate fetching questions and options from the backend\n  useEffect(() => {\n    // Here you can set data fetched from backend directly, for example:\n    // setQuestions(response.questions);\n    // setOptions(response.options);\n\n    // Example data, you should update this with the actual API response:\n    // const fetchedQuestions = [\"Are you looking for investment tips or financial planning?\"];\n    // const fetchedOptions = [\"Stock market\", \"Personal finance\", \"Cryptocurrency\", \"Investment tips\"];\n\n    setQuestions(fetchedQuestions);\n    setOptions(fetchedOptions);\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return (\n    <div>\n      <h2>Questions & Options</h2>\n      <div>\n        {questions && questions.length > 0 ? (\n          questions.map((question, index) => (\n            <div key={index}>\n              <p>{question}</p>\n              <ul>\n                {Array.isArray(options) && options.length > 0 ? (\n                  options.map((option, i) => (\n                    <li key={i}>{option}</li>\n                  ))\n                ) : (\n                  <p>No options available</p>\n                )}\n              </ul>\n            </div>\n          ))\n        ) : (\n          <p>No questions available</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Questions;\n\n\n// import React, { useContext } from 'react';\n// import { DataContext } from '../App';\n\n// function Questions() {\n//     const { questions, options } = useContext(DataContext);\n\n//     console.log(\"Questions state: \", questions); // Log questions state\n//     console.log(\"Options state: \", options); // Log options state\n\n//     // Check if questions exist and are in an array form\n//     if (!Array.isArray(questions) || questions.length === 0) {\n//         return <p>No questions available. Please enter a URL and click Classify.</p>;\n//     }\n\n//     return (\n//         <div className=\"questions\">\n//             <h2>Generated Questions</h2>\n//             {questions.map((question, index) => (\n//                 <div key={index}>\n//                     <p>{question}</p>\n//                     {options[index] && (\n//                         <ul>\n//                             {options[index].map((option, optIndex) => (\n//                                 <li key={optIndex}>{option}</li>\n//                             ))}\n//                         </ul>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default Questions;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd;IACA;IACA;;IAEA;IACA;IACA;;IAEAM,YAAY,CAACG,gBAAgB,CAAC;IAC9BD,UAAU,CAACE,cAAc,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACER,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5Bb,OAAA;MAAAS,QAAA,EACGN,SAAS,IAAIA,SAAS,CAACW,MAAM,GAAG,CAAC,GAChCX,SAAS,CAACY,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC5BjB,OAAA;QAAAS,QAAA,gBACET,OAAA;UAAAS,QAAA,EAAIO;QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjBb,OAAA;UAAAS,QAAA,EACGS,KAAK,CAACC,OAAO,CAACd,OAAO,CAAC,IAAIA,OAAO,CAACS,MAAM,GAAG,CAAC,GAC3CT,OAAO,CAACU,GAAG,CAAC,CAACK,MAAM,EAAEC,CAAC,kBACpBrB,OAAA;YAAAS,QAAA,EAAaW;UAAM,GAAVC,CAAC;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CACzB,CAAC,gBAEFb,OAAA;YAAAS,QAAA,EAAG;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAC3B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,GAVGI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CACN,CAAC,gBAEFb,OAAA;QAAAS,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC7B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACX,EAAA,CA3CQD,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AA6ClB,eAAeA,SAAS;;AAGxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}